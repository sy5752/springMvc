Spring 관련 jar

context, core, web, beans, web Mvc, testContext Framework, jdbc 
4.3.30.RELEASE버전으로 설치

junit - test
jstl
logback - logging

우리가 사용할 객체를 스프링 프레임워크(컨테이너)에서 생성할 수 있도록 설명서를 작성(XML, JAVA)

스프링 빈 객체를 주입 받을 수 있는 조건 : 주입을 받는 객체도 스프링 빈으로 등록이 되어있어야한다
								즉 스프링 컨테이너에서 관리가 되는 객체여야한다
ex : userService 객체에 userDao 스프링 빈을 (DI)주입하려면 userService객체도 스프링 빈이어야한다
	 userService 객체가 스프링 빈이 아니지만 스프링 컨테이너(applicationContext)객체를 참조하고 있으면 DL은 가능하다

DI(주입) 방식
1. setter : setter 메소드가 존재 해야함(xml, java 설정 파일)
2. 생성자 : 주입받으려는 빈을 인자로 하는 생성자가 존재해야함(xml, java 설정 파일)
3. 어노테이션 : @Resource, @AutoWired, @Inject (xml,java에서 설정 가능하나 잘 드러나지 않음)

scope : bean의 속성, singleton(default), prototype이 존재

디자인 패턴 - singleton : 특정 클래스의 인스턴스가 메모리상에서 하나만 존재하도록 하는 패턴
스프링 singleton : id당 하나의 객체를 만든다, bean 엘레멘트를 선언시 중복된 class를 사용 가능
				 동일한 클래스의 객체가 스프링 컨테이너 상에서는 여러개 존재하는 것이 가능하다.
				 스프링 컨테이너에서 빈의 식별 단위는 id
				 
ref, value-ref : 스프링빈을 주입할 때 사용하는 속성
				해당 속성에 들어오는 문자열을 스프링 번의 이름(id)이어야 한다.
			
bean 엘레멘트를 대체할 수 있는 방법
기존 : 스프링 빈을 하나씩 선언
		<bean ...... * 선언 하려고 하는 갯수만큼>
개선 : component-scan 이용
	 웹에서 자주 사용하는 모듈(레이얼) - controller, service, repository(dao)
	 1. 구현 클래스에 어노테이션을 적용(@Controller, @Service, @Repository)
	 2. component-scan 엘레멘트를 xml에 선언
	 	=> 특정 패키지 밑에 등록된 클래스를 스캔하면서
	 		@Controller, @Service, @Repository어노테이션이 붙은 클래스들을 스프링 빈으로 등록
	 		
- 스프링 프레임워크는 왜 탄생하게 되었나?

(학습목표 : 스프링 프레임워크의 탄생 배경을 설명할 수 있다.)

톰캣기동(서버실행) 

 Library vs Framework 

- 라이브러리(ex : jquery)
  * 프로그램 호출에 의한 제어
  * 정해진 대로 사용
  * 원본 라이브러리 재정의 가능

- Framework (ex : tomcat) 
  * 기능확장 가능
  * inversion of control : 프로그램의 흐름이 프레임워크에 의한 제어
  * 전체적인 틀 : 프레임워크
  * 틀 안의 세부적인 부속 : 개발자가 작성한 코드
 
프레임워크 사용하는 이유

* 구현/ 유지보수 편이
* 개발자들의 역량 획일화(누가와도 할 수 있음 - 차별성은 없어짐, 장점이자 단점)

* 시스템의 기능 외에 필요한 비기능 요소들을 제공 받을 수 있다
  -> 시스템 구축시마다 반복적으로 비기능 요소를 구현할 필요가 없다

비기능 : 디비커넥션 관리, 트랜잭션 제어(성공,실패 - 커밋, 롤백으로 했지만 복잡해지면 
					상당한 부담)

기능 : 인사시스템의 사원 정보 저장/조회/변경, 상담 시스템의 상담 내용 입력

* 비지니스 로직 구현에 집중 할 수 있다
* 비기능 요소들을 직접 구현할 자신이 없다
	* 게시판 기능을 구현할 때마다 웹 에디터를 개발자가 만들어야한다면?



스프링 프레임워크

개발자들이 비지니스 로직에만 집중할 수 있도록 기반환경을 제공

Q : [스프링] 프레임워크를 왜 써야할까?
   비기능 요소들을 매번 만들기 어렵기 때문에 가져다 쓸 수 있게 하려고

스프링 이전
* 특정

Linked in

IOC 컨테이너 이해

DI/DL 

DI를 이용한 객체 생성
Public class DI{
	Private 

* 객체 생성을 분리할 수는 있지만 객체 생성을 맡은 객체에 대한 의존성이 생김

* 객체 생성을 개발자가 담당하기 때문에 발생하는 문제

* 필요한 속성이 모두 설정된 객체를 갖고싶다
-> 객체를 생성하는 설명서와 함께 제어권을 다른 무엇인가에게 위임 
   : 객체를 관리하는 컨테이너(Spring IOC컨테이너)

DI : 컨테이너가 빈 설정 정보를 바탕으로 의존성을 고려하여 객체를 주입
	-> xml, java annotation 설정
	Ex : boardService에 boardDao 객체 주입 -> 많이 사용
DL: 컨테이너에 설정된 빈을 참조
	Ex : applicationContext객체로부터 boardService객체를 참조
 	-> 잘 사용하지 않음
	 		




