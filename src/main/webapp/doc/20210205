Spring 을 이용한 AJAX 처리

 요청			응답
ajax ==> json,xml,html

OOP
AOP : 여러 클래스로 분산된 책임을 별도의 관점으로 분리/캡슐화 하는 프로그래밍 방법

- Aspect : 여러 객체에 공통으로 적용되는 관심사항
- Advice : 공통 관심 기능을 언제 핵심 로직에 적용할지 정의
- JoinPoint : Advice가 적용될 시점/지점(메소드)
- PointCut : joinpoint의 식별을 정의(어떤 메소드에)
- Weaving : Advice(Aspect)를 핵심 로직 코드에 삽입하는 것
- Advisor : Advice를 지칭(spring aop에서만 사용하는 개념)
- Proxy : 핵심기능을 구현한 객체에 advice 적용 

ddit.board.service.*Service.*(..)
ddir.board.service.UserService.getUser(String 

ddit.board.service 패키지 내에 존재하는 클래스 중 service로 끝나는 클래스들의 모든 메소드(인자 관계 없음)

Filter
스프링 컨테이너에 포함 x -> 기본 설정에선느 DI활용 불가(딜리게이팅필터프록시 필터를 이용하면 가능)

AOP
범용적
일시적인 설정보다는 어플리케이션 전반에 대한 설정에 적합

INTERCEPTOR
DI가능/ 설정 간단
요청에 대한 전후 처리에 적당

- 컨트롤러 실행 전(preHandle)
- 컨트롤러 실행 후(PostHandle)
- 뷰를 실행한 후(afterCompletion)
